name: Container registry

on: 
  push:
      branches: [ main ]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/isen-python:latest,${{ vars.DOCKERHUB_USERNAME }}/isen-python:${{ github.sha }}

  trivy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          cache: true
          version: latest

      - name: Run Trivy vulnerability scanner on Docker image
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ vars.DOCKERHUB_USERNAME }}/isen-python:latest'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          skip-setup-trivy: true

  sbom:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: '${{ vars.DOCKERHUB_USERNAME }}/isen-python:latest'
          format: 'spdx-json'
          output-file: 'sbom.spdx.json'

      - name: Scan SBOM with Grype
        continue-on-error: true
        uses: anchore/scan-action@v6
        with:
          sbom: 'sbom.spdx.json'
          output-format: 'sarif'
          output-file: 'grype-results.sarif'

      - name: Upload Grype results
        uses: actions/upload-artifact@v4
        with:
          name: grype-results
          path: grype-results.sarif
  gcr:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Set up GCloud credentials
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}' 

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet

      - name: Pull image from Docker Hub
        run: |
          docker pull ${{ vars.DOCKERHUB_USERNAME }}/isen-python:latest

      - name: Tag image for Google Artifact Registry
        run: |
          docker tag ${{ vars.DOCKERHUB_USERNAME }}/isen-python:latest europe-west1-docker.pkg.dev/essential-oasis-458315-b4/isen-python-app/isen-python:latest

      - name: Push to Google Artifact Registry
        run: |
          docker push europe-west1-docker.pkg.dev/essential-oasis-458315-b4/isen-python-app/isen-python:latest

  deployment:
    needs: gcr
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout repository
      uses: 'actions/checkout@v4'

    - name: Set up Google Cloud credentials
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}' 

    - name: Deploy to Cloud Run
      id: 'deploy'
      uses: 'google-github-actions/deploy-cloudrun@v2'
      with:
        service: 'python-app'
        image: 'europe-west1-docker.pkg.dev/essential-oasis-458315-b4/isen-python-app/isen-python:latest'
        region: 'europe-west1'
        project_id: 'essential-oasis-458315-b4'
        env_vars: |
          SECRET_PRODUCTION_KEY=${{ secrets.SECRET_PRODUCTION_KEY }}

    - name: 'Use output'
      run: 'curl "${{ steps.deploy.outputs.url }}"'
  zap:
    needs: deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run the app in background
        run: |
         docker run -d -p 8080:8080 europe-west1-docker.pkg.dev/essential-oasis-458315-b4/isen-python-app/isen-python:latest
         sleep 10
      - name: Run zap baseline scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:8080'
          format: 'json'
          